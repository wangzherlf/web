[{"title":"nginx.md","url":"/web/2019/06/20/nginx-md/","content":"# [nginx](nginx.org)\nNginx是一款轻量级的HTTP服务器，采用事件驱动的异步非阻塞处理方式框架，这让其具有极好的IO性能，时常用于服务端的反向代理和负载均衡\n\n**Nginx版本**\n\n- Mainline version  开发版\n- Stable version   稳定版\n- legacy version  历史版本\n\n## 基于yum方式安装Nginx\n\n**用yum进行安装必要程序**\n\n```\nyum -y install gcc gcc-c++ autoconf pcre-devel make automake\nyum -y install wget httpd-tools vim\n```\n\n**检查yum源是否存在nginx**\n\n```\nyum list | grep nginx\n```\n\n**去nginx查找最新源**\n\n[http://nginx.org/en/download.html](http://nginx.org/en/download.html) 下面找到stable and mainline versions\n\n```\n[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/OS/OSRELEASE/$basearch/\ngpgcheck=0\nenabled=1\n```\n\n**编辑源**\n\n```\nvim /etc/yum.repos.d/nginx.repo\n```\n\n根据操作系统及版本号修改源的baseurl\n\n```\nbaseurl=http://nginx.org/packages/centos/7/$basearch/\n```\n\n**安装nginx**\n\n```\nyum install nginx\n```\n\n**查看nginx安装目录**\n\n```\nrpm -ql nginx\n```\n\n`rpm` 是 linux的rpm包管理工具\n\n`-q `代表询问模式\n\n`-l `代表返回列表\n\n**查看nginx配置文件的位置**\n\n```\nnginx -t\n```\n\n## nginx配置文件详解\n\n**nginx.confg配置**\n\n```\nuser nginx;           # 运行用户，默认是nginx, 可以不进行设置\nworker_processes  1;  # nginx进程数 一般设置为和CPU核数一样\nerror_log /var/log/nginx/error.log warn; # 错误日志存放目录\npid    /var/run/nginx.pid;               # 进程pid存放目录\nevents {\n    worker_connections 1024;            # 后台进程的最大并发数\n}\nhttp {\n    include /etc/nginx/mime.types;        # 文件扩展名与类型映射表\n    default_type application/octet-stream;    # 默认文件类型\n    log_format main 'xxxx'                    # 设置日志模式\n    access_log /var/log/nginx/access.log main # nginx访问日志存放位置\n    sendfile    on;       # 开启高效传输模式\n    # tcp_nopush    on;   # 减少网络报文的数量\n    keepalive_timeout 65; # 保持连接的时间，也叫超时时间\n    # gzip     on;        # 开启gzip 压缩\n    include /etc/nginx/conf.d/*.conf;   # 包含的子配置项位置和文件\n}\n```\n\n**default.conf**\n\n```02 5\nserver {\n    listen     80;             #配置监听端口\n    server_name  localhost;    # 配置域名\n    location / {\n        root /usr/share/nginx/html;      # 服务器默认启动目录\n        index index.html index.htm;      # 默认访问文件\n    }\n    # error_page 404  /404.html;       # 配置404页面\n    error_page 500 502 503 504 /5x.html;  # 错误状态码的显示页面，配置后需要重启\n    location /50x.html {\n        root /usr/share/nginx/html;\n    }\n}\n```\n\n## nginx服务启动、停止、重启\n\n**启动nginx服务**\n\n```\nnginx     # 直接启动\nsystemctl start nginx.service  # 使用systemctl命令启动\n```\n\n**查询服务的运行状况**\n\n```\nps aux | grep nginx\n```\n\n**停止nginx服务**\n\n```\nnginx -s stop   # 立即停止服务，无论进程是否在工作，直接停止\nnginx -s quit   # 从容停止服务，在进程完成当前工作后在停止\nkillall nginx   # 杀死进程\nsystemctl stop nginx.service  # 使用systemctl停止\n```\n\n**重启nginx服务**\n\n```\nsystemctl restart nginx.service\n```\n\n**重新载入配置文件**\n\n```\nnginx -s reload # 在修改nginx配置文件后，需要重新载入\n```\n\n**查看端口号**\n\n在默认情况下，nginx启动后会监听80端口，从而提供http访问，如果80端口被占用，可以使用`netstat -tlnp`命令查看端口号的占用情况\n\n## 自定义错误页和访问设置\n\n**多错误指向同一个页面**\n\n```\nerror_page 500 502 503 504 /50x.html;    # 将这四个错误代码的时候都跳转到根目录下50x.html\n```\n\nerror_page指令用于自定义错误页面\n\n```\nerror_page 404 /404_error.html;     # 单独为错误指定处理方式\nerror_page 404 http://www.ssmy.cn;  # 为错误指定外部地址\n```\n\n## 访问权限控制\n\n有时候我们的服务器只允许特定主机访问，比如内部OA系统或应用的管理后台系统或某些应用接口，这时需要控制一些IP访问，可以直接在location里进行配置\n\n```\nlocation / {                   # / 表示所有请求都走里面的规则\n    deny 123.123.123.123;        # 禁止指定IP访问\n    allow 345.345.345.345/500;   # 允许指定的IP段访问 345.345.345.345-345.345.345.500\n    allow all;                   # 允许所有ip访问\n    deny  all;                   # 禁止所有ip访问\n}\n```\n\n在同一个块作用域中，先定义的权限指令会覆盖后面的权限指令，后面的权限指令无效\n\n**复杂权限控制匹配**\n\n`=`表示精确匹配\n\n```\nlocation =/img {  # /img 目录允许所有用户访问\n    allow all;      \n}\nlocation =/admin { # /admin 目录进制所有用户访问\n    deny all;\n}\n```\n\n**使用正则表达式设置访问权限**\n\n`~\\`表示使用正则表达式\n\n```\nlocation ~\\.php$ { # 以.php结尾的页面都进制访问\n    deny all;\n}\n```\n\n## nginx设置虚拟主机\n\n虚拟主机是指在一台物理主机服务器上划分出多个磁盘空间，每个磁盘空间都是一个虚拟主机，每台虚拟主机都可以对外提供Web服务，并且互不干扰。在外界看来，虚拟主机就是一台独立的服务器主机，这意味着用户能够利用虚拟主机把多个不同域名的网站部署在同一台服务器上\n\n配置虚拟主机可以基于端口号、IP和域名来设置\n\n可以在`nginx.conf`或`default.conf`中配置，也可以在子文件里新建`.conf`文件进行配置\n\n- 基于端口配置\n\n```\nserver {\n    listen 8001;               # 监听8001端口\n    server_name localhost;     # server name\n    root /home/html;           # 文件存放目录\n    index index.html;          # 首页文件\n}\n```\n\n- 基于IP/域名配置\n\n```\nserver {\n    listen 80;                       # 监听80端口\n    server_name 123.123.123.123或域名;     # server name\n    root /home/html;                 # 文件存放目录\n    index index.html;                # 首页文件\n}\n```\n\n## nginx反向代理设置\n\n**正向代理**\n\n正向代理代理的是客户端。正向代理是客户端想访问目标服务器，但没有权限，代理服务器有访问服务器的权限，同时客户端有访问代理的权限，这时可以通过客户端访问代理服务器，代理服务器访问真实服务器，把内容返回回来\n\n**反向代理**\n\n反向代理代理的是服务器。反向代理是客户端想访问服务器，发送的内容会被发送到代理服务器，代理服务器把请求发送到自己设置好的内部服务器。\n\n**反向代理的用途和好处**\n\n- 安全性\n\n  正向代理的客户端能够在隐藏自身信息的同时访问任意网站，这给网络安全代理了极大的威胁。因此必须把服务器保护起来，使用反向代理客户端，用户只能通过外网来访问代理服务器，并且用户并不知道自己访问的真实服务器是哪一台，可以很好的提供安全保护\n\n- 功能性\n\n  反向代理的主要用途是为多个服务器提供负载均衡，缓存等功能。负载均衡是一个网站的内容被部署在若干服务器上，可以把这些机器看成一个集群，nginx可以将接收到的客户端请求均匀地分配到这个集群中所有的服务器上，从而实现服务器压力的平均分配\n\n```\nserver {\n    listen 80;\n    server_name 请求域名;\n    location / {\n        proxy_pass 被代理的域名或端口;\n    }\n}\n```\n\n**其它反向代理命令**\n\n- `proxy_set_header` 将客户端请求发送给后端服务器之前，更改来自客户端的请求头信息\n- `proxy_connect_timeout` 配置nginx与后端代理服务器尝试建立连接的超时时间\n- `proxy_read_timeout` 配置nginx向后端服务器组发出read请求后，等待相应的超时时间\n- `proxy_send_timeout` 配置nginx向后端服务器组发出write请求后，等待响应的超时时间\n- `proxy_redirect` 用于修改后端服务器返回的响应头中的Location和Refresh\n\n## nginx适配PC或移动设备\n\nNginx通过内置变量`$http_user_agent`可以获取到请求客户端的userAgent, 可以判断用户目前处于移动端还是PC端，从而展示不同的页面给用户\n\n```\nserver {\n    listen 80;\n    server_name nginx2.jspang.com;\n    location / {\n        root /usr/share/nginx/pc; # 默认访问pc端页面\n        if ($http_user_agent ~* '(Android|webOS|iPhone|iPod|BlackBerry)') {\n            root /usr/share/nginx/mobile; # 访问移动端页面\n        }\n        index index.html;\n    }\n}\n```\n\n\n\n## nginx设置Gzip压缩\n\nGzip是网页的一种网页压缩技术，经过gzip压缩后，页面大小可以变为原来的30%甚至更小。更小的网页会让用户浏览的体验更好，速度更快。gzip网页压缩的实现需要浏览器和服务器的支持。\n\n当浏览器支持Gzip压缩时，会在请求消息中包含`Accept-Encoding:gzip`这样nginx就会向浏览器发送Gzip后的内容,同时在相应信息头中加入`Content-Encoding: gzip`,声明这是gizp后的内容，告知浏览器要先解压后才能解析输出\n\n```\nhttp {\n    gzip on;\n    gzip_types text/plain application/javascript text/css;\n}\n```\n\n**Gzip配置项**\n\n- `gzip` 用于开启或关闭gzip模块\n- `gzip_buffers` 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流\n- `gzip_comp_level` Gzip压缩比，压缩级别是1-9，1的压缩级别最低，9的压缩级别最高。压缩级别越高压缩率越大，压缩时间越长\n- `gzip_disable` 可以通过该指令对一些特定的user-agent不使用压缩功能\n- `gzip_min_length` 设置允许压缩的页面最小字节数，页面字节数从响应的消息头content-length中获取\n- `gzip_http_version` 识别http协议版本，其值可以是1.0或1.1\n- `gzip_proxied` 用于设置启用或禁用从代理服务器上收到相应内容gzip压缩\n- `gzip_vary`用于在响应消息头中添加Vary: Accept-Encoding, 使代理服务器根据请求头中的Accept-Encoding识别是否启用gzip压缩\n\n\n"}]